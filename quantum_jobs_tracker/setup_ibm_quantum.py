#!/usr/bin/env python3
"""
IBM Quantum Setup Script
This script helps set up IBM Quantum credentials for the dashboard
"""

import os
import sys
import getpass
from pathlib import Path

def setup_ibm_quantum():
    """Interactive setup for IBM Quantum credentials"""
    print("🔧 IBM Quantum Dashboard Setup")
    print("=" * 50)
    print()
    print("This script will help you set up IBM Quantum credentials for the dashboard.")
    print("You can get your credentials from: https://quantum-computing.ibm.com/account")
    print()
    
    # Check if .env file exists
    env_file = Path('.env')
    if env_file.exists():
        print("⚠️  .env file already exists. This will update your existing configuration.")
        response = input("Do you want to continue? (y/N): ").strip().lower()
        if response != 'y':
            print("Setup cancelled.")
            return
    
    # Get IBM Quantum Token
    print("\n1. IBM Quantum API Token")
    print("   Get your token from: https://quantum-computing.ibm.com/account")
    print("   Go to Account → API Token → Copy token")
    print()
    
    token = getpass.getpass("Enter your IBM Quantum API Token: ").strip()
    if not token:
        print("❌ No token provided. Setup cancelled.")
        return
    
    # Get IBM Quantum CRN (optional)
    print("\n2. IBM Quantum CRN (Cloud Resource Name)")
    print("   This is optional but recommended for better performance")
    print("   You can find it in your IBM Cloud account")
    print()
    
    crn = input("Enter your IBM Quantum CRN (optional): ").strip()
    
    # Create .env file
    env_content = f"""# IBM Quantum Credentials
# Generated by setup_ibm_quantum.py
IBM_QUANTUM_TOKEN={token}
IBM_QUANTUM_CRN={crn if crn else 'your_ibm_quantum_crn_here'}

# Database Configuration
DATABASE_URL=sqlite:///quantum_data.db

# Flask Configuration
FLASK_SECRET_KEY=your_secret_key_here
FLASK_ENV=development

# Quantum Dashboard Configuration
DASHBOARD_REFRESH_INTERVAL=30000
ENABLE_REAL_QUANTUM_DATA=true
ENABLE_OFFLINE_MODE=false

# IBM Quantum Service Configuration
IBM_QUANTUM_HUB=ibm-q
IBM_QUANTUM_GROUP=open
IBM_QUANTUM_PROJECT=main

# Debug Configuration
DEBUG_MODE=true
VERBOSE_LOGGING=true
"""
    
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("\n✅ .env file created successfully!")
        print("\n3. Testing IBM Quantum Connection")
        print("   Testing your credentials...")
        
        # Test the connection
        try:
            from dotenv import load_dotenv
            load_dotenv()
            
            import qiskit_ibm_runtime
            from qiskit_ibm_runtime import QiskitRuntimeService
            
            # Test connection
            service = QiskitRuntimeService(channel="ibm_quantum", token=token)
            backends = service.backends()
            
            print(f"✅ Connection successful! Found {len(backends)} backends")
            print("   Available backends:")
            for backend in backends[:5]:  # Show first 5
                print(f"   - {backend.name} ({backend.num_qubits} qubits)")
            if len(backends) > 5:
                print(f"   ... and {len(backends) - 5} more")
            
        except Exception as e:
            print(f"⚠️  Connection test failed: {e}")
            print("   The credentials are saved, but you may need to check them.")
        
        print("\n4. Next Steps")
        print("   - Start the dashboard: python real_quantum_app.py")
        print("   - Open your browser to: http://localhost:10000")
        print("   - The dashboard will now use real IBM Quantum data!")
        
    except Exception as e:
        print(f"❌ Error creating .env file: {e}")
        return

def check_requirements():
    """Check if required packages are installed"""
    print("🔍 Checking requirements...")
    
    required_packages = [
        'qiskit_ibm_runtime',
        'qiskit',
        'flask',
        'python-dotenv'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"✅ {package}")
        except ImportError:
            print(f"❌ {package} - MISSING")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n⚠️  Missing packages: {', '.join(missing_packages)}")
        print("Install them with: pip install " + " ".join(missing_packages))
        return False
    
    print("✅ All requirements satisfied!")
    return True

if __name__ == "__main__":
    print("🚀 IBM Quantum Dashboard Setup")
    print("=" * 50)
    
    if not check_requirements():
        print("\nPlease install missing packages and run this script again.")
        sys.exit(1)
    
    setup_ibm_quantum()
